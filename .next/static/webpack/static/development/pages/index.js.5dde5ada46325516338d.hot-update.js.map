{"version":3,"file":"static/webpack/static/development/pages/index.js.5dde5ada46325516338d.hot-update.js","sources":["webpack:///./components/BoxTitles/BoxTitle.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport pixelWidth from \"string-pixel-width\";\nimport {\n  fontSize11,\n  fontSize13,\n  fontSize14,\n  fontSize16,\n  fontSize18,\n  fontSize20,\n  fontSize28,\n  fontSize32,\n  fontSize42,\n  black,\n  white\n} from \"../constants/styled-constants\";\n\nconst elements = {\n  h1: { main: fontSize42, subtitle: fontSize20, margin: `-0.9rem` },\n  h2: { main: fontSize32, subtitle: fontSize18, margin: `-0.7rem` },\n  h3: { main: fontSize28, subtitle: fontSize16, margin: `-0.6rem` },\n  h4: { main: fontSize20, subtitle: fontSize14, margin: `-0.6rem` },\n  h5: { main: fontSize18, subtitle: fontSize13, margin: `-0.5rem` },\n  h6: { main: fontSize14, subtitle: fontSize11, margin: `-0.4rem` }\n};\n\nconst getMargin = ({ as = \"h2\" }) => elements[as].margin;\nconst getMainSize = ({ as = \"h2\" }) => elements[as].main;\nconst getsubtitleSize = ({ as = \"h2\" }) => elements[as].subtitle;\nconst marginTopBottom = props => (props.top ? \"margin-top\" : \"margin-bottom\");\nconst noMarginTopBottom = props =>\n  props.top ? `border-top: none` : `border-bottom: none`;\nconst checkInverse = props =>\n  props.inverse ? props.theme.black || \"black\" : props.theme.white || \"white\";\n\nconst BoxHeading = styled.h2`\n  position: relative;\n  align-self: center;\n  text-align: center;\n\n  margin: auto;\n  padding: ${props => props.theme.spacing16 || \"1rem\"};\n\n  min-width: ${({ minWidth = 1 }) => minWidth}px;\n  max-width: fit-content;\n\n  border: 1px solid ${checkInverse};\n  ${noMarginTopBottom};\n  color: ${checkInverse};\n\n  font-weight: bold;\n  font-size: ${getMainSize};\n  font-family: ${props => props.theme.serif || \"serif\"};\n\n  line-height: ${props => props.theme.lineHeightTight || \"1rem\"};\n  letter-spacing: -0.03125rem;\n\n  &::after {\n    content: ${props => (props.subtitle ? `\"${props.subtitle}\"` : \" \")};\n    position: absolute;\n    text-align: center;\n    font-size: ${getsubtitleSize};\n    font-weight: normal;\n\n    width: fit-content;\n\n    ${props => (props.top ? \"top\" : \"bottom\")}: 0;\n    left: 0;\n    right: 0;\n    display: block;\n\n    margin: 0;\n    margin-left: auto;\n    margin-right: auto;\n    ${marginTopBottom}: ${getMargin};\n  }\n`;\n\nconst BottomBorder = styled.div`\n  margin: 0;\n  padding: 0;\n  &::before,\n  &::after {\n    content: \"\";\n    position: absolute;\n    ${props => (props.top ? \"top\" : \"bottom\")}: 0;\n    ${props => (props.top ? \"border-top\" : \"border-bottom\")}: 1px solid\n      ${props => (props.inverse ? black : white)};\n\n    width: calc(51% - ${props => `${props.width}px`});\n  }\n  &::before {\n    left: 0;\n  }\n  &::after {\n    right: 0;\n  }\n`;\n\nclass BoxTitle extends Component {\n  state = {\n    bottomBorderlength: undefined\n  };\n\n  calculateTextWidth = (txt = \"\") => {\n    const as = this.props.as in elements ? this.props.as : \"h2\";\n    const FONT_MULTIPLE = parseFloat(elements[as].subtitle);\n    const BASE_FONT_SIZE = 16;\n    const fontSizeInPixels = BASE_FONT_SIZE * FONT_MULTIPLE;\n    const leftAndRightPadding = fontSizeInPixels * 2;\n    return txt.length > 0\n      ? pixelWidth(txt, { font: \"Times New Roman\", size: fontSizeInPixels }) +\n          leftAndRightPadding\n      : 0;\n  };\n\n  render() {\n    const { children, inverse, top, subtitle, ...props } = this.props;\n    const subTitleWidth = this.calculateTextWidth(subtitle);\n    return (\n      <BoxHeading\n        {...props}\n        minWidth={subTitleWidth}\n        subtitle={subtitle}\n        inverse={inverse}\n        top={top}\n      >\n        {children}\n        <BottomBorder inverse={inverse} top={top} width={subTitleWidth / 2} />\n      </BoxHeading>\n    );\n  }\n}\n\nexport const BoxH1 = ({ children, ...props }) => (\n  <BoxTitle {...props} as=\"h1\">\n    {children}\n  </BoxTitle>\n);\n\nexport const SectionBoxTitle = ({ children, ...props }) => (\n  <BoxTitle {...props} as=\"h2\" top>\n    {children}\n  </BoxTitle>\n);\n\nexport default BoxTitle;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAMA;AAAA;AAEA;AAAA;AAAA;AAAA;AASA;AAAA;AAEA;AAAA;AAIA;AAAA;AAQA;AAAA;AAYA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AASA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAhCA;AACA;AAkCA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;;;;A","sourceRoot":""}